// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Nasal.flex

// Copyright 2024
package com.bobdotcom.nasal;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.bobdotcom.nasal.psi.NasalTypes;
import com.intellij.psi.TokenType;


class NasalLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int SSTRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\2\0\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\3\24"+
    "\4\25\2\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\0\1\35\1\36\1\37\1\40\1\41\1\42\6\43"+
    "\1\44\1\45\1\46\2\43\1\47\1\50\4\43\1\51"+
    "\2\43\1\52\1\53\1\54\1\55\1\43\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\43"+
    "\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106"+
    "\1\43\1\107\1\110\1\111\1\112\6\0\1\3\44\0"+
    "\1\43\12\0\1\43\4\0\1\43\5\0\27\43\1\0"+
    "\37\43\1\0\u01ca\43\4\0\14\43\16\0\5\43\7\0"+
    "\1\43\1\0\1\43\21\0\165\43\1\0\2\43\2\0"+
    "\4\43\1\0\1\43\6\0\1\43\1\0\3\43\1\0"+
    "\1\43\1\0\24\43\1\0\123\43\1\0\213\43\1\0"+
    "\255\43\1\0\46\43\2\0\1\43\6\0\51\43\10\0"+
    "\55\43\1\0\1\43\1\0\2\43\1\0\2\43\1\0"+
    "\1\43\10\0\33\43\4\0\4\43\35\0\13\43\5\0"+
    "\100\43\12\113\4\0\146\43\1\0\10\43\2\0\12\43"+
    "\1\0\6\43\12\113\3\43\2\0\1\43\20\0\73\43"+
    "\2\0\145\43\16\0\12\113\54\43\4\0\1\43\2\0"+
    "\1\43\2\0\56\43\22\0\34\43\4\0\13\43\65\0"+
    "\25\43\1\0\10\43\25\0\17\43\1\0\201\43\2\0"+
    "\12\113\1\0\23\43\1\0\10\43\2\0\2\43\2\0"+
    "\26\43\1\0\7\43\1\0\1\43\3\0\4\43\2\0"+
    "\11\43\2\0\2\43\2\0\4\43\10\0\1\43\4\0"+
    "\2\43\1\0\5\43\2\0\12\113\2\43\12\0\1\43"+
    "\1\0\1\43\2\0\3\43\1\0\6\43\4\0\2\43"+
    "\2\0\26\43\1\0\7\43\1\0\2\43\1\0\2\43"+
    "\1\0\2\43\2\0\1\43\1\0\5\43\4\0\2\43"+
    "\2\0\3\43\3\0\1\43\7\0\4\43\1\0\1\43"+
    "\7\0\12\113\6\43\13\0\3\43\1\0\11\43\1\0"+
    "\3\43\1\0\26\43\1\0\7\43\1\0\2\43\1\0"+
    "\5\43\2\0\12\43\1\0\3\43\1\0\3\43\2\0"+
    "\1\43\17\0\4\43\2\0\12\113\11\0\7\43\1\0"+
    "\3\43\1\0\10\43\2\0\2\43\2\0\26\43\1\0"+
    "\7\43\1\0\2\43\1\0\5\43\2\0\11\43\2\0"+
    "\2\43\2\0\3\43\10\0\2\43\4\0\2\43\1\0"+
    "\5\43\2\0\12\113\1\0\1\43\20\0\2\43\1\0"+
    "\6\43\3\0\3\43\1\0\4\43\3\0\2\43\1\0"+
    "\1\43\1\0\2\43\3\0\2\43\3\0\3\43\3\0"+
    "\14\43\4\0\5\43\3\0\3\43\1\0\4\43\2\0"+
    "\1\43\6\0\1\43\16\0\12\113\20\0\15\43\1\0"+
    "\3\43\1\0\27\43\1\0\20\43\3\0\10\43\1\0"+
    "\3\43\1\0\4\43\7\0\2\43\1\0\3\43\5\0"+
    "\4\43\2\0\12\113\20\0\4\43\1\0\10\43\1\0"+
    "\3\43\1\0\27\43\1\0\12\43\1\0\5\43\2\0"+
    "\11\43\1\0\3\43\1\0\4\43\7\0\2\43\7\0"+
    "\1\43\1\0\4\43\2\0\12\113\1\0\2\43\15\0"+
    "\4\43\1\0\10\43\1\0\3\43\1\0\63\43\1\0"+
    "\3\43\1\0\5\43\5\0\4\43\7\0\5\43\2\0"+
    "\12\113\12\0\6\43\2\0\2\43\1\0\22\43\3\0"+
    "\30\43\1\0\11\43\1\0\1\43\2\0\7\43\3\0"+
    "\1\43\4\0\6\43\1\0\1\43\1\0\10\43\6\0"+
    "\12\113\2\0\2\43\15\0\72\43\5\0\17\43\1\0"+
    "\12\113\47\0\2\43\1\0\1\43\1\0\5\43\1\0"+
    "\30\43\1\0\1\43\1\0\27\43\2\0\5\43\1\0"+
    "\1\43\1\0\6\43\2\0\12\113\2\0\4\43\40\0"+
    "\1\43\27\0\2\43\6\0\12\113\13\0\1\43\1\0"+
    "\1\43\1\0\1\43\4\0\12\43\1\0\44\43\4\0"+
    "\24\43\1\0\22\43\1\0\44\43\11\0\1\43\71\0"+
    "\100\43\12\113\6\0\100\43\12\113\4\43\2\0\46\43"+
    "\1\0\1\43\5\0\1\43\2\0\53\43\1\0\115\43"+
    "\1\0\4\43\2\0\7\43\1\0\1\43\1\0\4\43"+
    "\2\0\51\43\1\0\4\43\2\0\41\43\1\0\4\43"+
    "\2\0\7\43\1\0\1\43\1\0\4\43\2\0\17\43"+
    "\1\0\71\43\1\0\4\43\2\0\103\43\2\0\3\43"+
    "\40\0\20\43\20\0\126\43\2\0\6\43\3\0\u016c\43"+
    "\2\0\21\43\1\0\32\43\5\0\113\43\3\0\13\43"+
    "\7\0\15\43\1\0\7\43\13\0\25\43\13\0\24\43"+
    "\14\0\15\43\1\0\3\43\1\0\2\43\14\0\124\43"+
    "\3\0\1\43\4\0\2\43\2\0\12\113\41\0\3\43"+
    "\2\0\12\113\6\0\131\43\7\0\53\43\5\0\106\43"+
    "\12\0\37\43\1\0\14\43\4\0\14\43\12\0\12\113"+
    "\36\43\2\0\5\43\13\0\54\43\4\0\32\43\6\0"+
    "\12\113\46\0\34\43\4\0\77\43\1\0\35\43\2\0"+
    "\1\43\12\113\6\0\12\113\15\0\1\43\10\0\17\43"+
    "\101\0\114\43\4\0\12\113\21\0\11\43\14\0\60\43"+
    "\12\113\72\43\14\0\70\43\10\0\12\113\3\0\3\43"+
    "\12\113\44\43\2\0\11\43\7\0\53\43\2\0\3\43"+
    "\20\0\3\43\1\0\47\43\5\0\372\43\1\0\33\43"+
    "\2\0\6\43\2\0\46\43\2\0\6\43\2\0\10\43"+
    "\1\0\1\43\1\0\1\43\1\0\1\43\1\0\37\43"+
    "\2\0\65\43\1\0\7\43\1\0\1\43\3\0\3\43"+
    "\1\0\7\43\3\0\4\43\2\0\6\43\4\0\15\43"+
    "\5\0\3\43\1\0\7\43\53\0\2\3\25\0\2\43"+
    "\23\0\1\43\34\0\1\43\15\0\1\43\20\0\15\43"+
    "\63\0\41\43\21\0\1\43\4\0\1\43\2\0\12\43"+
    "\1\0\1\43\3\0\5\43\6\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\4\43\1\0\13\43\2\0\4\43"+
    "\5\0\5\43\4\0\1\43\21\0\51\43\u022d\0\64\43"+
    "\26\0\57\43\1\0\57\43\1\0\205\43\6\0\11\43"+
    "\14\0\46\43\1\0\1\43\5\0\1\43\2\0\70\43"+
    "\7\0\1\43\17\0\30\43\11\0\7\43\1\0\7\43"+
    "\1\0\7\43\1\0\7\43\1\0\7\43\1\0\7\43"+
    "\1\0\7\43\1\0\7\43\1\0\40\43\57\0\1\43"+
    "\325\0\3\43\31\0\17\43\1\0\5\43\2\0\5\43"+
    "\4\0\126\43\2\0\2\43\2\0\3\43\1\0\132\43"+
    "\1\0\4\43\5\0\53\43\1\0\136\43\21\0\33\43"+
    "\65\0\306\43\112\0\360\43\20\0\215\43\103\0\56\43"+
    "\2\0\15\43\3\0\20\43\12\113\2\43\24\0\63\43"+
    "\1\0\12\43\1\0\163\43\45\0\11\43\2\0\147\43"+
    "\2\0\65\43\2\0\5\43\60\0\61\43\30\0\64\43"+
    "\14\0\106\43\12\0\12\113\6\0\30\43\3\0\1\43"+
    "\1\0\3\43\12\113\44\43\2\0\44\43\14\0\35\43"+
    "\3\0\101\43\16\0\1\43\12\113\6\0\20\43\12\113"+
    "\5\43\1\0\67\43\11\0\16\43\2\0\12\113\6\0"+
    "\27\43\3\0\111\43\30\0\3\43\2\0\20\43\2\0"+
    "\5\43\12\0\6\43\2\0\6\43\2\0\6\43\11\0"+
    "\7\43\1\0\7\43\1\0\53\43\1\0\14\43\10\0"+
    "\173\43\1\0\2\43\2\0\12\113\6\0\244\43\14\0"+
    "\27\43\4\0\61\43\4\0\u0100\3\156\43\2\0\152\43"+
    "\46\0\7\43\14\0\5\43\5\0\14\43\1\0\15\43"+
    "\1\0\5\43\1\0\1\43\1\0\2\43\1\0\2\43"+
    "\1\0\154\43\41\0\153\43\22\0\100\43\2\0\66\43"+
    "\50\0\14\43\4\0\20\43\20\0\20\43\3\0\2\43"+
    "\30\0\3\43\40\0\5\43\1\0\207\43\23\0\12\113"+
    "\7\0\32\43\4\0\1\43\1\0\32\43\13\0\131\43"+
    "\3\0\6\43\2\0\6\43\2\0\6\43\2\0\3\43"+
    "\43\0\14\43\1\0\32\43\1\0\23\43\1\0\2\43"+
    "\1\0\17\43\2\0\16\43\42\0\173\43\105\0\65\43"+
    "\210\0\1\43\202\0\35\43\3\0\61\43\17\0\1\43"+
    "\37\0\40\43\15\0\36\43\5\0\53\43\5\0\36\43"+
    "\2\0\44\43\4\0\10\43\1\0\5\43\52\0\236\43"+
    "\2\0\12\113\6\0\44\43\4\0\44\43\4\0\50\43"+
    "\10\0\64\43\234\0\67\43\11\0\26\43\12\0\10\43"+
    "\230\0\6\43\2\0\1\43\1\0\54\43\1\0\2\43"+
    "\3\0\1\43\2\0\27\43\12\0\27\43\11\0\37\43"+
    "\101\0\23\43\1\0\2\43\12\0\26\43\12\0\32\43"+
    "\106\0\70\43\6\0\2\43\100\0\4\43\1\0\2\43"+
    "\5\0\10\43\1\0\3\43\1\0\35\43\2\0\3\43"+
    "\4\0\1\43\40\0\35\43\3\0\35\43\43\0\10\43"+
    "\1\0\36\43\31\0\66\43\12\0\26\43\12\0\23\43"+
    "\15\0\22\43\156\0\111\43\67\0\63\43\15\0\63\43"+
    "\15\0\50\43\10\0\12\113\306\0\35\43\12\0\1\43"+
    "\10\0\41\43\217\0\27\43\11\0\107\43\37\0\12\113"+
    "\17\0\74\43\25\0\31\43\7\0\12\113\6\0\65\43"+
    "\1\0\12\113\4\0\3\43\11\0\44\43\2\0\1\43"+
    "\11\0\105\43\4\0\4\43\3\0\12\113\1\43\1\0"+
    "\1\43\43\0\22\43\1\0\45\43\6\0\1\43\101\0"+
    "\7\43\1\0\1\43\1\0\4\43\1\0\17\43\1\0"+
    "\12\43\7\0\73\43\5\0\12\113\6\0\4\43\1\0"+
    "\10\43\2\0\2\43\2\0\26\43\1\0\7\43\1\0"+
    "\2\43\1\0\5\43\1\0\12\43\2\0\2\43\2\0"+
    "\3\43\2\0\1\43\6\0\1\43\5\0\7\43\2\0"+
    "\7\43\3\0\5\43\213\0\113\43\5\0\12\113\4\0"+
    "\2\43\40\0\106\43\1\0\1\43\10\0\12\113\246\0"+
    "\66\43\2\0\11\43\27\0\6\43\42\0\101\43\3\0"+
    "\1\43\13\0\12\113\46\0\71\43\7\0\12\113\66\0"+
    "\33\43\2\0\17\43\4\0\12\113\306\0\73\43\145\0"+
    "\100\43\12\113\25\0\1\43\240\0\10\43\2\0\56\43"+
    "\2\0\10\43\1\0\2\43\33\0\77\43\10\0\1\43"+
    "\10\0\112\43\3\0\1\43\42\0\71\43\7\0\11\43"+
    "\1\0\55\43\1\0\11\43\17\0\12\113\30\0\36\43"+
    "\2\0\26\43\1\0\16\43\111\0\7\43\1\0\2\43"+
    "\1\0\54\43\3\0\1\43\1\0\2\43\1\0\11\43"+
    "\10\0\12\113\6\0\6\43\1\0\2\43\1\0\45\43"+
    "\1\0\2\43\1\0\6\43\7\0\12\113\u0136\0\27\43"+
    "\11\0\232\43\146\0\157\43\21\0\304\43\274\0\57\43"+
    "\321\0\107\43\271\0\71\43\7\0\37\43\1\0\12\113"+
    "\146\0\36\43\2\0\5\43\13\0\67\43\11\0\4\43"+
    "\14\0\12\113\11\0\25\43\5\0\23\43\260\0\100\43"+
    "\200\0\113\43\4\0\71\43\7\0\21\43\100\0\2\43"+
    "\1\0\1\43\34\0\370\43\10\0\363\43\15\0\37\43"+
    "\61\0\3\43\21\0\4\43\10\0\u018c\43\4\0\153\43"+
    "\5\0\15\43\3\0\11\43\7\0\12\43\3\0\2\43"+
    "\306\0\5\43\3\0\6\43\10\0\10\43\2\0\7\43"+
    "\36\0\4\43\224\0\3\43\273\0\125\43\1\0\107\43"+
    "\1\0\2\43\2\0\1\43\2\0\2\43\2\0\4\43"+
    "\1\0\14\43\1\0\1\43\1\0\7\43\1\0\101\43"+
    "\1\0\4\43\2\0\10\43\1\0\7\43\1\0\34\43"+
    "\1\0\4\43\1\0\5\43\1\0\1\43\3\0\7\43"+
    "\1\0\u0154\43\2\0\31\43\1\0\31\43\1\0\37\43"+
    "\1\0\31\43\1\0\37\43\1\0\31\43\1\0\37\43"+
    "\1\0\31\43\1\0\37\43\1\0\31\43\1\0\10\43"+
    "\2\0\62\113\67\43\4\0\62\43\10\0\1\43\16\0"+
    "\1\43\26\0\5\43\1\0\17\43\120\0\7\43\1\0"+
    "\21\43\2\0\7\43\1\0\2\43\1\0\5\43\325\0"+
    "\55\43\3\0\16\43\2\0\12\113\4\0\1\43\u0171\0"+
    "\60\43\12\113\6\0\305\43\13\0\7\43\51\0\114\43"+
    "\4\0\12\113\246\0\4\43\1\0\33\43\1\0\2\43"+
    "\1\0\1\43\2\0\1\43\1\0\12\43\1\0\4\43"+
    "\1\0\1\43\1\0\1\43\6\0\1\43\4\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\3\43\1\0\2\43"+
    "\1\0\1\43\2\0\1\43\1\0\1\43\1\0\1\43"+
    "\1\0\1\43\1\0\1\43\1\0\2\43\1\0\1\43"+
    "\2\0\4\43\1\0\7\43\1\0\4\43\1\0\4\43"+
    "\1\0\1\43\1\0\12\43\1\0\21\43\5\0\3\43"+
    "\1\0\5\43\1\0\21\43\164\0\32\43\6\0\32\43"+
    "\6\0\32\43\166\0\327\43\51\0\65\43\13\0\336\43"+
    "\2\0\u0182\43\16\0\u0131\43\37\0\36\43\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\3\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\20\1\21\1\22\1\23\1\24\1\25\1\26\11\27"+
    "\1\30\1\31\1\32\1\1\15\27\1\33\1\34\1\35"+
    "\1\36\1\37\2\40\1\41\1\1\1\37\1\42\2\5"+
    "\1\43\1\44\1\45\1\46\1\0\1\20\1\47\1\20"+
    "\2\0\1\50\1\51\1\52\1\53\1\54\10\27\1\55"+
    "\1\0\7\27\1\56\1\57\2\27\1\60\4\27\1\61"+
    "\1\62\1\63\2\37\1\64\1\0\3\20\10\27\1\65"+
    "\1\66\3\27\1\67\1\27\1\70\2\27\1\71\1\27"+
    "\1\37\1\20\2\27\1\72\6\27\1\73\3\27\1\74"+
    "\3\27\1\20\5\27\1\75\1\27\1\76\4\27\1\77"+
    "\1\20\5\27\1\100\1\20\1\27\1\101\1\27\1\20"+
    "\1\102\1\103\1\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\344\0\u017c\0\u01c8"+
    "\0\344\0\u0214\0\u0260\0\344\0\344\0\344\0\u02ac\0\u02f8"+
    "\0\344\0\u0344\0\u0390\0\u03dc\0\u0428\0\u0474\0\344\0\344"+
    "\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688\0\u06d4"+
    "\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\344\0\344\0\u089c"+
    "\0\u08e8\0\u0934\0\u0980\0\u09cc\0\u0a18\0\u0a64\0\u0ab0\0\u0afc"+
    "\0\u0b48\0\u0b94\0\u0be0\0\u0c2c\0\u0c78\0\u0cc4\0\344\0\u0d10"+
    "\0\344\0\u0d5c\0\u0da8\0\344\0\u0df4\0\344\0\u0e40\0\u0e8c"+
    "\0\344\0\344\0\u0ed8\0\344\0\344\0\344\0\344\0\u0f24"+
    "\0\u0f70\0\344\0\344\0\u0fbc\0\u1008\0\344\0\344\0\344"+
    "\0\344\0\344\0\u1054\0\u10a0\0\u10ec\0\u1138\0\u1184\0\u11d0"+
    "\0\u121c\0\u1268\0\344\0\u12b4\0\u1300\0\u134c\0\u1398\0\u13e4"+
    "\0\u1430\0\u147c\0\u14c8\0\u0688\0\u0688\0\u1514\0\u1560\0\u0688"+
    "\0\u15ac\0\u15f8\0\u1644\0\u1690\0\344\0\344\0\344\0\u16dc"+
    "\0\u1728\0\344\0\u1774\0\u17c0\0\u1008\0\u180c\0\u1858\0\u18a4"+
    "\0\u18f0\0\u193c\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\344\0\u0688"+
    "\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c\0\u1be8\0\u0688\0\u1c34\0\u1c80"+
    "\0\u0688\0\u1ccc\0\344\0\u1d18\0\u1d64\0\u1db0\0\u0688\0\u1dfc"+
    "\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u0688\0\u1fc4\0\u2010"+
    "\0\u205c\0\u0688\0\u20a8\0\u20f4\0\u2140\0\u218c\0\u21d8\0\u2224"+
    "\0\u2270\0\u22bc\0\u2308\0\u0688\0\u2354\0\u0688\0\u23a0\0\u23ec"+
    "\0\u2438\0\u2484\0\u0688\0\u24d0\0\u251c\0\u2568\0\u25b4\0\u2600"+
    "\0\u264c\0\u0688\0\u2698\0\u26e4\0\u0688\0\u2730\0\u277c\0\u0688"+
    "\0\u0688\0\u27c8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\5\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\3\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\3\37"+
    "\1\41\1\42\1\43\1\44\1\45\1\37\1\46\1\4"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\37\1\55"+
    "\1\56\2\37\1\57\3\37\1\60\1\61\1\62\1\63"+
    "\1\64\3\37\1\65\1\66\2\37\1\67\1\70\1\71"+
    "\1\72\1\4\2\73\1\74\2\73\1\75\1\73\1\76"+
    "\43\73\1\77\40\73\2\100\1\74\2\100\1\75\4\100"+
    "\1\76\40\100\1\77\40\100\115\0\1\5\2\0\1\5"+
    "\111\0\1\6\143\0\1\101\61\0\2\12\1\102\2\12"+
    "\1\103\106\12\32\0\1\104\113\0\1\105\113\0\1\106"+
    "\113\0\1\107\102\0\1\110\1\0\4\111\117\0\1\112"+
    "\102\0\1\111\1\0\4\26\11\0\1\113\1\114\1\113"+
    "\6\0\1\115\10\0\1\113\1\114\1\113\20\0\1\115"+
    "\27\0\1\111\1\0\4\26\11\0\1\113\1\114\1\113"+
    "\17\0\1\113\1\114\1\113\61\0\1\116\113\0\1\117"+
    "\113\0\1\120\102\0\1\121\12\0\1\122\102\0\4\37"+
    "\6\0\15\37\5\0\20\37\1\123\7\37\4\0\1\37"+
    "\23\0\4\37\6\0\15\37\5\0\16\37\1\124\11\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\30\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\1\125"+
    "\27\37\4\0\1\37\23\0\4\37\6\0\15\37\5\0"+
    "\1\126\27\37\4\0\1\37\23\0\4\37\6\0\15\37"+
    "\5\0\23\37\1\127\4\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\1\37\1\130\26\37\4\0\1\37"+
    "\23\0\4\37\6\0\15\37\5\0\4\37\1\131\23\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\22\37"+
    "\1\132\5\37\4\0\1\37\32\0\1\133\61\0\2\134"+
    "\4\0\106\134\23\0\4\37\6\0\15\37\5\0\15\37"+
    "\1\135\2\37\1\136\7\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\20\37\1\137\7\37\4\0\1\37"+
    "\23\0\4\37\6\0\15\37\5\0\16\37\1\140\11\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\13\37"+
    "\1\141\14\37\4\0\1\37\23\0\4\37\6\0\15\37"+
    "\5\0\16\37\1\142\4\37\1\143\4\37\4\0\1\37"+
    "\23\0\4\37\6\0\15\37\5\0\5\37\1\144\22\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\4\37"+
    "\1\145\23\37\4\0\1\37\23\0\4\37\6\0\15\37"+
    "\5\0\10\37\1\146\17\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\1\37\1\147\16\37\1\150\7\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\1\151"+
    "\27\37\4\0\1\37\23\0\4\37\6\0\15\37\5\0"+
    "\4\37\1\152\23\37\4\0\1\37\23\0\4\37\6\0"+
    "\15\37\5\0\1\153\27\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\7\37\1\154\20\37\4\0\1\37"+
    "\32\0\1\155\113\0\1\156\61\0\2\73\1\0\2\73"+
    "\1\0\1\73\1\0\43\73\1\0\40\73\2\0\1\74"+
    "\111\0\2\157\4\0\15\157\2\160\1\161\66\157\2\100"+
    "\1\0\2\100\1\0\4\100\1\0\40\100\1\0\40\100"+
    "\2\0\1\102\132\0\1\162\115\0\4\111\11\0\1\113"+
    "\1\114\1\113\17\0\1\113\1\114\1\113\45\0\1\163"+
    "\1\0\1\163\2\0\4\164\110\0\1\165\3\166\6\0"+
    "\6\166\14\0\6\166\52\0\4\37\6\0\15\37\5\0"+
    "\20\37\1\167\7\37\4\0\1\37\23\0\4\37\6\0"+
    "\15\37\5\0\16\37\1\170\11\37\4\0\1\37\23\0"+
    "\4\37\6\0\15\37\5\0\22\37\1\171\5\37\4\0"+
    "\1\37\23\0\4\37\6\0\15\37\5\0\22\37\1\172"+
    "\5\37\4\0\1\37\23\0\4\37\6\0\15\37\5\0"+
    "\14\37\1\173\13\37\4\0\1\37\23\0\4\37\6\0"+
    "\15\37\5\0\11\37\1\174\16\37\4\0\1\37\23\0"+
    "\4\37\6\0\15\37\5\0\6\37\1\175\21\37\4\0"+
    "\1\37\23\0\4\37\6\0\15\37\5\0\20\37\1\176"+
    "\7\37\4\0\1\37\56\0\1\177\60\0\4\37\6\0"+
    "\15\37\5\0\3\37\1\200\24\37\4\0\1\37\23\0"+
    "\4\37\6\0\15\37\5\0\6\37\1\145\21\37\4\0"+
    "\1\37\23\0\4\37\6\0\15\37\5\0\4\37\1\201"+
    "\23\37\4\0\1\37\23\0\4\37\6\0\15\37\5\0"+
    "\15\37\1\202\12\37\4\0\1\37\23\0\4\37\6\0"+
    "\15\37\5\0\21\37\1\203\6\37\4\0\1\37\23\0"+
    "\4\37\6\0\15\37\5\0\20\37\1\204\7\37\4\0"+
    "\1\37\23\0\4\37\6\0\15\37\5\0\15\37\1\205"+
    "\12\37\4\0\1\37\23\0\4\37\6\0\15\37\5\0"+
    "\13\37\1\206\14\37\4\0\1\37\23\0\4\37\6\0"+
    "\15\37\5\0\11\37\1\145\16\37\4\0\1\37\23\0"+
    "\4\37\6\0\15\37\5\0\20\37\1\207\7\37\4\0"+
    "\1\37\23\0\4\37\6\0\15\37\5\0\22\37\1\210"+
    "\5\37\4\0\1\37\23\0\4\37\6\0\15\37\5\0"+
    "\20\37\1\211\7\37\4\0\1\37\23\0\4\37\6\0"+
    "\15\37\5\0\10\37\1\212\17\37\4\0\1\37\23\0"+
    "\3\161\111\0\3\213\111\0\4\164\110\0\4\164\11\0"+
    "\1\113\1\0\1\113\17\0\1\113\1\0\1\113\52\0"+
    "\4\214\6\0\6\214\14\0\6\214\52\0\4\37\6\0"+
    "\15\37\5\0\1\215\27\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\13\37\1\216\14\37\4\0\1\37"+
    "\23\0\4\37\6\0\15\37\5\0\4\37\1\217\23\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\7\37"+
    "\1\217\20\37\4\0\1\37\23\0\4\37\6\0\15\37"+
    "\5\0\1\37\1\220\26\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\4\37\1\221\23\37\4\0\1\37"+
    "\23\0\4\37\6\0\4\37\1\222\10\37\5\0\30\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\10\37"+
    "\1\223\17\37\4\0\1\37\23\0\4\37\6\0\15\37"+
    "\5\0\1\224\27\37\4\0\1\37\23\0\4\37\6\0"+
    "\15\37\5\0\22\37\1\225\5\37\4\0\1\37\23\0"+
    "\4\37\6\0\15\37\5\0\4\37\1\226\3\37\1\227"+
    "\17\37\4\0\1\37\23\0\4\37\6\0\15\37\5\0"+
    "\4\37\1\230\3\37\1\231\17\37\4\0\1\37\23\0"+
    "\4\37\6\0\15\37\5\0\2\37\1\232\25\37\4\0"+
    "\1\37\23\0\4\37\6\0\15\37\5\0\4\37\1\233"+
    "\23\37\4\0\1\37\23\0\4\37\6\0\15\37\5\0"+
    "\23\37\1\234\4\37\4\0\1\37\23\0\4\37\6\0"+
    "\15\37\5\0\13\37\1\235\14\37\4\0\1\37\23\0"+
    "\4\236\6\0\6\236\14\0\6\236\52\0\4\37\6\0"+
    "\15\37\5\0\27\37\1\217\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\4\37\1\237\23\37\4\0\1\37"+
    "\23\0\4\37\6\0\15\37\5\0\4\37\1\240\23\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\2\37"+
    "\1\241\25\37\4\0\1\37\23\0\4\37\6\0\15\37"+
    "\5\0\26\37\1\242\1\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\15\37\1\243\12\37\4\0\1\37"+
    "\23\0\4\37\6\0\15\37\5\0\12\37\1\244\15\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\10\37"+
    "\1\245\17\37\4\0\1\37\23\0\4\37\6\0\15\37"+
    "\5\0\5\37\1\246\22\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\1\247\27\37\4\0\1\37\23\0"+
    "\4\37\6\0\15\37\5\0\15\37\1\250\12\37\4\0"+
    "\1\37\23\0\4\37\6\0\15\37\5\0\15\37\1\251"+
    "\12\37\4\0\1\37\23\0\4\37\6\0\15\37\5\0"+
    "\20\37\1\252\7\37\4\0\1\37\23\0\4\37\6\0"+
    "\15\37\5\0\4\37\1\253\23\37\4\0\1\37\23\0"+
    "\4\254\6\0\6\254\14\0\6\254\52\0\4\37\6\0"+
    "\15\37\5\0\1\255\27\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\20\37\1\217\7\37\4\0\1\37"+
    "\23\0\4\37\6\0\15\37\5\0\22\37\1\217\5\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\17\37"+
    "\1\217\10\37\4\0\1\37\23\0\4\37\6\0\15\37"+
    "\5\0\6\37\1\217\21\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\15\37\1\256\12\37\4\0\1\37"+
    "\23\0\4\37\6\0\15\37\5\0\2\37\1\257\25\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\3\37"+
    "\1\260\24\37\4\0\1\37\23\0\4\37\6\0\15\37"+
    "\5\0\22\37\1\261\5\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\15\37\1\262\12\37\4\0\1\37"+
    "\23\0\4\263\6\0\6\263\14\0\6\263\52\0\4\37"+
    "\6\0\15\37\5\0\15\37\1\217\12\37\4\0\1\37"+
    "\23\0\4\37\6\0\15\37\5\0\23\37\1\264\4\37"+
    "\4\0\1\37\23\0\4\37\6\0\15\37\5\0\7\37"+
    "\1\265\20\37\4\0\1\37\23\0\4\37\6\0\15\37"+
    "\5\0\4\37\1\266\23\37\4\0\1\37\23\0\4\37"+
    "\6\0\15\37\5\0\21\37\1\145\6\37\4\0\1\37"+
    "\23\0\4\267\6\0\6\267\14\0\6\267\52\0\4\37"+
    "\6\0\15\37\5\0\4\37\1\270\23\37\4\0\1\37"+
    "\23\0\4\37\6\0\15\37\5\0\26\37\1\271\1\37"+
    "\4\0\1\37\23\0\4\272\6\0\6\272\14\0\6\272"+
    "\52\0\4\113\6\0\6\113\14\0\6\113\27\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10260];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\2\1\1\11\2\1\3\11"+
    "\2\1\1\11\5\1\2\11\15\1\2\11\17\1\1\11"+
    "\1\1\1\11\2\1\1\11\1\1\1\11\2\1\2\11"+
    "\1\1\4\11\1\0\1\1\2\11\2\0\5\11\10\1"+
    "\1\11\1\0\20\1\3\11\2\1\1\11\1\0\13\1"+
    "\1\11\13\1\1\11\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[186];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  NasalLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 68: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 69: break;
          case 3:
            { return NasalTypes.NOT;
            }
          // fall through
          case 70: break;
          case 4:
            { yybegin(STRING);
//                                    tokenStart = yychar;
//                                    tokenLength = 1;
            }
          // fall through
          case 71: break;
          case 5:
            { return NasalTypes.COMMENT;
            }
          // fall through
          case 72: break;
          case 6:
            { return NasalTypes.BIT_AND;
            }
          // fall through
          case 73: break;
          case 7:
            { yybegin(SSTRING);
//                                    tokenStart = yychar;
//                                    tokenLength = 1;
            }
          // fall through
          case 74: break;
          case 8:
            { return NasalTypes.LPAR;
            }
          // fall through
          case 75: break;
          case 9:
            { return NasalTypes.RPAR;
            }
          // fall through
          case 76: break;
          case 10:
            { return NasalTypes.MUL;
            }
          // fall through
          case 77: break;
          case 11:
            { return NasalTypes.PLUS;
            }
          // fall through
          case 78: break;
          case 12:
            { return NasalTypes.COMMA;
            }
          // fall through
          case 79: break;
          case 13:
            { return NasalTypes.MINUS;
            }
          // fall through
          case 80: break;
          case 14:
            { return NasalTypes.DOT;
            }
          // fall through
          case 81: break;
          case 15:
            { return NasalTypes.DIV;
            }
          // fall through
          case 82: break;
          case 16:
            { return NasalTypes.NUMBER;
            }
          // fall through
          case 83: break;
          case 17:
            { return NasalTypes.COLON;
            }
          // fall through
          case 84: break;
          case 18:
            { return NasalTypes.SEMI;
            }
          // fall through
          case 85: break;
          case 19:
            { return NasalTypes.LT;
            }
          // fall through
          case 86: break;
          case 20:
            { return NasalTypes.ASSIGN;
            }
          // fall through
          case 87: break;
          case 21:
            { return NasalTypes.GT;
            }
          // fall through
          case 88: break;
          case 22:
            { return NasalTypes.QUESTION;
            }
          // fall through
          case 89: break;
          case 23:
            { return NasalTypes.IDENTIFIER;
            }
          // fall through
          case 90: break;
          case 24:
            { return NasalTypes.LBRA;
            }
          // fall through
          case 91: break;
          case 25:
            { return NasalTypes.RBRA;
            }
          // fall through
          case 92: break;
          case 26:
            { return NasalTypes.BIT_XOR;
            }
          // fall through
          case 93: break;
          case 27:
            { return NasalTypes.LBRACE;
            }
          // fall through
          case 94: break;
          case 28:
            { return NasalTypes.BIT_OR;
            }
          // fall through
          case 95: break;
          case 29:
            { return NasalTypes.RBRACE;
            }
          // fall through
          case 96: break;
          case 30:
            { return NasalTypes.CAT;
            }
          // fall through
          case 97: break;
          case 31:
            { /*tokenLength += yylength();*/
            }
          // fall through
          case 98: break;
          case 32:
            { yybegin(YYINITIAL);
            }
          // fall through
          case 99: break;
          case 33:
            { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return NasalTypes.STRING;
            }
          // fall through
          case 100: break;
          case 34:
            { return NasalTypes.NEQ;
            }
          // fall through
          case 101: break;
          case 35:
            { return NasalTypes.BIT_ANDEQ;
            }
          // fall through
          case 102: break;
          case 36:
            { return NasalTypes.MULEQ;
            }
          // fall through
          case 103: break;
          case 37:
            { return NasalTypes.PLUSEQ;
            }
          // fall through
          case 104: break;
          case 38:
            { return NasalTypes.MINUSEQ;
            }
          // fall through
          case 105: break;
          case 39:
            { return NasalTypes.DIVEQ;
            }
          // fall through
          case 106: break;
          case 40:
            { return NasalTypes.LTE;
            }
          // fall through
          case 107: break;
          case 41:
            { return NasalTypes.EQ;
            }
          // fall through
          case 108: break;
          case 42:
            { return NasalTypes.GTE;
            }
          // fall through
          case 109: break;
          case 43:
            { return NasalTypes.NULL_ACCESS;
            }
          // fall through
          case 110: break;
          case 44:
            { return NasalTypes.NULL_CHAIN;
            }
          // fall through
          case 111: break;
          case 45:
            { return NasalTypes.BIT_XOREQ;
            }
          // fall through
          case 112: break;
          case 46:
            { return NasalTypes.IF;
            }
          // fall through
          case 113: break;
          case 47:
            { return NasalTypes.SPECIAL;
            }
          // fall through
          case 114: break;
          case 48:
            { return NasalTypes.OR;
            }
          // fall through
          case 115: break;
          case 49:
            { return NasalTypes.BIT_OREQ;
            }
          // fall through
          case 116: break;
          case 50:
            { return NasalTypes.CATEQ;
            }
          // fall through
          case 117: break;
          case 51:
            { /*tokenLength += 2;*/
            }
          // fall through
          case 118: break;
          case 52:
            { return NasalTypes.ELLIPSIS;
            }
          // fall through
          case 119: break;
          case 53:
            { return NasalTypes.CHAR_CONST;
            }
          // fall through
          case 120: break;
          case 54:
            { return NasalTypes.AND;
            }
          // fall through
          case 121: break;
          case 55:
            { return NasalTypes.FOR;
            }
          // fall through
          case 122: break;
          case 56:
            { return NasalTypes.NIL;
            }
          // fall through
          case 123: break;
          case 57:
            { return NasalTypes.VAR;
            }
          // fall through
          case 124: break;
          case 58:
            { return NasalTypes.TYPE;
            }
          // fall through
          case 125: break;
          case 59:
            { return NasalTypes.ELSE;
            }
          // fall through
          case 126: break;
          case 60:
            { return NasalTypes.FUNC;
            }
          // fall through
          case 127: break;
          case 61:
            { return NasalTypes.BREAK;
            }
          // fall through
          case 128: break;
          case 62:
            { return NasalTypes.ELSIF;
            }
          // fall through
          case 129: break;
          case 63:
            { return NasalTypes.WHILE;
            }
          // fall through
          case 130: break;
          case 64:
            { return NasalTypes.RETURN;
            }
          // fall through
          case 131: break;
          case 65:
            { return NasalTypes.FOREACH;
            }
          // fall through
          case 132: break;
          case 66:
            { return NasalTypes.CONTINUE;
            }
          // fall through
          case 133: break;
          case 67:
            { return NasalTypes.FORINDEX;
            }
          // fall through
          case 134: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
